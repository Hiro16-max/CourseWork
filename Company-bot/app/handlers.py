from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.keyboards.keyboards import get_registration_keyboard, get_menu_keyboard, create_pagination_buttons, get_workshedule_keyboard
from app.commands.commands import check_user_exists, update_employee, get_employees_page, get_total_pages, \
    search_employee_by_fio, get_work_schedule
from app.states import Registration, Find

PAGE_SIZE = 5
router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    user_exists = await check_user_exists(message.from_user.id)
    if user_exists:
        await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...", reply_markup=get_menu_keyboard())
    else:
        keyboard = get_registration_keyboard()
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ñ–µ–ª–∞–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ—Ä–æ–≤–∞—Ç—å—Å—è?",
                             reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith('register_'))
async def handle_registration_callback(query: CallbackQuery, state: FSMContext):
    callback_data = query.data
    if callback_data == "register_yes":
        await query.message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û.",
                                   reply_markup=ReplyKeyboardRemove())
        await state.set_state(Registration.waiting_for_fio)
    elif callback_data == "register_no":
        await query.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

    await query.message.edit_reply_markup()


@router.message(Registration.waiting_for_fio)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à id –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏.")
    await state.set_state(Registration.waiting_for_company_id)


@router.message(Registration.waiting_for_company_id)
async def process_company_id(message: Message, state: FSMContext):
    await state.update_data(company_id=message.text)

    data = await state.get_data()
    name, company_id = data.get('name'), data.get('company_id')

    if await update_employee(message.from_user.id, name, company_id):
        await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {name}! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                             reply_markup=get_menu_keyboard())
        await state.clear()
    else:
        await message.answer(f"–¢–∞–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –µ—â–µ —Ä–∞–∑")
        await state.clear()
        await handle_registration_callback("register_yes", state)


@router.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
async def show_employees(message: Message, state: FSMContext):
    if not await check_user_exists(message.from_user.id):
        keyboard = get_registration_keyboard()
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", reply_markup=keyboard)
        await handle_registration_callback("register_yes", state)
        return
    page = 1
    employees = await get_employees_page(page, PAGE_SIZE)
    total_pages = await get_total_pages(PAGE_SIZE)

    employees_text = format_employees(employees)
    keyboard = create_pagination_buttons(page, total_pages)

    await message.answer(
        text=f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n{employees_text}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data.startswith('page_'))
async def handle_page_navigation(callback_query: CallbackQuery):
    page = int(callback_query.data.split("_")[1])

    employees = await get_employees_page(page, PAGE_SIZE)
    total_pages = await get_total_pages(PAGE_SIZE)
    employees_text = format_employees(employees)

    keyboard = create_pagination_buttons(page, total_pages)

    await callback_query.message.edit_text(
        text=f"–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n{employees_text}\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}",
        reply_markup=keyboard
    )



def format_employees(employees):
    return "\n".join([f"{emp.fio} - {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if emp.working else '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}" for emp in
                      employees]) or "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."


@router.message(lambda message: message.text == "–ü–æ–∏—Å–∫ –ø–æ –§–ò–û")
async def search_employee(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(Find.waiting_for_fio)


@router.message(Find.waiting_for_fio)
async def process_search_query(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    name = data.get('name')

    employees = await search_employee_by_fio(name)

    if len(employees) == 1:
        employee = employees[0]
        response_message = (
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee['fio']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {employee['phone']}\n"
            f"–ü–æ—á—Ç–∞: {employee['mail']}\n"
            f"–†–∞–±–æ—Ç–∞–µ—Ç: {'–î–∞' if employee['working'] else '–ù–µ—Ç'}"
        )
        await message.answer(response_message, reply_markup=get_workshedule_keyboard(employee['id']))
        await state.clear()
    elif len(employees) > 1:
        response_message = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ:\n\n"
        for i, employee in enumerate(employees, start=1):
            response_message += (
                f"üî¢ {i}. \n"
                f"üë§ –§–ò–û: {employee['fio']}\n"
                f"üè¢ –û—Ç–¥–µ–ª: {employee['department']}\n"
                f"üë• –ö–æ–º–∞–Ω–¥–∞: {employee['team']}\n"
                f"{'-' * 30}\n"
            )

        await message.answer(response_message)
        await state.set_state(Find.waiting_for_selection)
    else:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard())
        await state.clear()


@router.message(Find.waiting_for_selection)
async def process_employee_selection(message: Message, state: FSMContext):
    try:
        index = int(message.text) - 1
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    data = await state.get_data()
    name = data.get('name')
    employees = await search_employee_by_fio(name)

    if 0 <= index < len(employees):
        employee = employees[index]
        response_message = (
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee['fio']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {employee['phone']}\n"
            f"–ü–æ—á—Ç–∞: {employee['mail']}\n"
            f"–†–∞–±–æ—Ç–∞–µ—Ç: {'–î–∞' if employee['working'] else '–ù–µ—Ç'}"
        )
        await message.answer(response_message, reply_markup=get_workshedule_keyboard(employee['id']))
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return state.set_state(Find.waiting_for_selection)

    await state.clear()


@router.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫")
async def send_work_schedule(message: Message):
    employee_id = message.from_user.id
    schedule = await get_work_schedule(employee_id)
    response_message = str(show_schedule(schedule))
    await message.answer(response_message, reply_markup=get_menu_keyboard())


@router.callback_query(lambda c: c.data.startswith("work_shedule:"))
async def handle_work_schedule_callback(callback_query: CallbackQuery):
    employee_id = int(callback_query.data.split(":")[1])
    schedule = await get_work_schedule(employee_id)
    response_message = show_schedule(schedule)
    await callback_query.message.answer(response_message)
    await callback_query.message.edit_reply_markup()
    await callback_query.answer()


def show_schedule(schedule: dict) -> str:
    if schedule:
        response_message = (
            f"–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {schedule.get('fio', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}:\n\n"
            f"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: {schedule.get('Monday', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í—Ç–æ—Ä–Ω–∏–∫: {schedule.get('Tuesday', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–°—Ä–µ–¥–∞: {schedule.get('Wednesday', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ß–µ—Ç–≤–µ—Ä–≥: {schedule.get('Thursday', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ü—è—Ç–Ω–∏—Ü–∞: {schedule.get('Friday', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–°—É–±–±–æ—Ç–∞: {schedule.get('Saturday', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: {schedule.get('Sunday', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        )
    else:
        response_message = "–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    return response_message
